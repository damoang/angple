name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  # 코드 품질 검사
  lint:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔷 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎨 Check formatting
        run: npm run format -- --check

      - name: 🔍 Lint TypeScript
        run: npm run lint

      - name: 🔍 Lint Go code
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: services/auth

  # 타입 체크
  type-check:
    name: 📝 Type Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build packages
        run: npm run build:packages

      - name: 📝 Type check
        run: npm run type-check

  # 단위 테스트
  test-frontend:
    name: 🧪 Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build packages
        run: npm run build:packages

      - name: 🧪 Run tests
        run: npm test

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # Go 서비스 테스트
  test-backend:
    name: 🧪 Test Backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth, user, post, feed, media]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔷 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📦 Install dependencies
        working-directory: services/${{ matrix.service }}
        run: go mod download

      - name: 🧪 Run tests
        working-directory: services/${{ matrix.service }}
        run: go test -v -race -coverprofile=coverage.out ./...
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
          REDIS_URL: redis://localhost:6379

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/coverage.out
          flags: ${{ matrix.service }}

  # 통합 테스트
  integration-test:
    name: 🔄 Integration Tests
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐳 Start services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: 🧪 Run integration tests
        run: |
          npm run test:integration

      - name: 🧹 Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # 빌드 테스트
  build:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: [lint, type-check]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔷 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build packages
        run: npm run build:packages

      - name: 🏗️ Build frontend
        run: cd apps/web && npm run build

      - name: 🏗️ Build backend services
        run: |
          for service in auth user post feed media; do
            cd services/$service
            go build -o bin/$service cmd/main.go
            cd ../..
          done

  # Docker 빌드 (메인 브랜치만)
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        component: [web, auth, user, post, feed, media]

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          token: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/Dockerfile.${{ matrix.component }}
          push: true
          tags: damoang/${{ matrix.component }}:latest,damoang/${{ matrix.component }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 보안 스캔
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 스테이징 배포 (develop 브랜치)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: 🚀 Deploy to staging
        run: |
          kubectl apply -f infrastructure/k8s/staging/
          kubectl rollout restart deployment/damoang-web -n staging
          kubectl rollout restart deployment/damoang-api -n staging

      - name: ✅ Wait for deployment
        run: |
          kubectl rollout status deployment/damoang-web -n staging --timeout=300s
          kubectl rollout status deployment/damoang-api -n staging --timeout=300s

  # 프로덕션 배포 (main 브랜치 + 수동 승인)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, security]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: 🚀 Deploy to production
        run: |
          kubectl apply -f infrastructure/k8s/production/
          kubectl set image deployment/damoang-web damoang-web=damoang/web:${{ github.sha }} -n production
          kubectl set image deployment/damoang-api damoang-api=damoang/auth:${{ github.sha }} -n production

      - name: ✅ Wait for deployment
        run: |
          kubectl rollout status deployment/damoang-web -n production --timeout=600s
          kubectl rollout status deployment/damoang-api -n production --timeout=600s

      - name: 🎉 Notify success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: '🎉 다모앙 플랫폼이 성공적으로 배포되었습니다!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 성능 테스트 (주간)
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.github/lighthouse/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: ⚡ Run load tests
        run: |
          npm install -g artillery
          artillery run tools/performance/load-test.yml 