version: '3.8'

services:
  # 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: damoang-postgres
    environment:
      POSTGRES_DB: damoang
      POSTGRES_USER: damoang
      POSTGRES_PASSWORD: damoang123
      POSTGRES_MULTIPLE_DATABASES: auth,user,post,feed,media
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - damoang-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U damoang"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (캐시 & 세션)
  redis:
    image: redis:7-alpine
    container_name: damoang-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - damoang-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak (인증 서버)
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: damoang-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: damoang
      KC_DB_PASSWORD: damoang123
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - damoang-network
    command: start-dev
    volumes:
      - ./infrastructure/docker/keycloak/import:/opt/keycloak/data/import
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Elasticsearch (검색)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: damoang-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - damoang-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO (S3 호환 객체 저장소)
  minio:
    image: minio/minio:latest
    container_name: damoang-minio
    environment:
      MINIO_ROOT_USER: damoang
      MINIO_ROOT_PASSWORD: damoang123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - damoang-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Mailhog (이메일 테스트)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: damoang-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - damoang-network

  # Jaeger (분산 추적)
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: damoang-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "14268:14268"  # jaeger-collector HTTP
      - "16686:16686"  # jaeger-ui
    networks:
      - damoang-network

  # Prometheus (메트릭 수집)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: damoang-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - damoang-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana (대시보드)
  grafana:
    image: grafana/grafana:10.0.0
    container_name: damoang-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - damoang-network
  # Admin SvelteKit App
  admin:
    build:
      context: ./apps/admin
      dockerfile: Dockerfile
      target: development
    container_name: damoang-admin
    ports:
      - "5173:5173"
    volumes:
      - ./apps/admin:/app
      - /app/node_modules
    networks:
      - damoang-network
    environment:
      - NODE_ENV=development

  # Web SvelteKit App  
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: development
    container_name: damoang-web
    ports:
      - "5174:5174"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    networks:
      - damoang-network
    environment:
      - NODE_ENV=development


# 볼륨 정의
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 네트워크 정의
networks:
  damoang-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16 